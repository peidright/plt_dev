#ifndef CTP_TRADERSPI_H_
#define CTP_TRADERSPI_H_

#include "config.h"
#include "ThostFtdcTraderApi.h"
#include "trader.h"
#include "CtpTrader.h"


class CtpTrader;
class CtpTradeApi : public CThostFtdcTraderApi
{
	

};




class CtpTradeSpi : public CThostFtdcTraderSpi
{
public:
	int requestId;
	int frontId;
	int sessionId;
	int nextOrderRef;
	int confirm;
	int login_status;


	CThostFtdcTraderApi *api;
	string test;
	CtpTrader* ctptrader;

	//Quoter *quoter;
	///当客户端与交易后台建立起通信连接时（还未登录前），该方法被调用。
	CtpTradeSpi(CThostFtdcTraderApi* api, CtpTrader *ctptrader):api(api){this->ctptrader=ctptrader;
		this->frontId=0;
		this->sessionId=0;
		this->nextOrderRef=0;
		this->confirm=0;
		this->login_status=0;
	};

	/*
   CtpTradeSpi(CThostFtdcTraderApi* api, Trader *trader):api(api){

	   this->trader=trader;
	   this->frontId=0;
	   this->sessionId=0;
	   this->nextOrderRef=0;
	   this->confirm=0;
	   this->login_status=0;
   };
	*/
   ~CtpTradeSpi(){};

	///当客户端与交易后台建立起通信连接时（还未登录前），该方法被调用。
	virtual void OnFrontConnected();

	///登录请求响应
	virtual void OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin,	CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///投资者结算结果确认响应
	virtual void OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);
	
	///请求查询合约响应
	virtual void OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///请求查询资金账户响应
	virtual void OnRspQryTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///请求查询投资者持仓响应
	virtual void OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *pInvestorPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///报单录入请求响应
	virtual void OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///报单操作请求响应
	virtual void OnRspOrderAction(CThostFtdcInputOrderActionField *pInputOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///错误应答
	virtual void OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);
	
	///当客户端与交易后台通信连接断开时，该方法被调用。当发生这个情况后，API会自动重新连接，客户端可不做处理。
	virtual void OnFrontDisconnected(int nReason);
		
	///心跳超时警告。当长时间未收到报文时，该方法被调用。
	virtual void OnHeartBeatWarning(int nTimeLapse);
	
	///报单通知
	virtual void OnRtnOrder(CThostFtdcOrderField *pOrder);

	///成交通知
	virtual void OnRtnTrade(CThostFtdcTradeField *pTrade);

public:
	///用户登录请求
	void ReqUserLogin(TThostFtdcBrokerIDType	appId,
	        TThostFtdcUserIDType	userId,	TThostFtdcPasswordType	passwd);
	///投资者结算结果确认
	//void ReqSettlementInfoConfirm();
	void   ReqSettlementInfoConfirm(const char * brokerid, const char *userid);
	
	///请求查询合约
	void ReqQryInstrument(TThostFtdcInstrumentIDType instId);
	///请求查询资金账户
	void ReqQryTradingAccount();
	///请求查询投资者持仓
	void ReqQryInvestorPosition(TThostFtdcInstrumentIDType instId);
	///报单录入请求
  void ReqOrderInsert(TThostFtdcInstrumentIDType instId,
        TThostFtdcDirectionType dir, TThostFtdcCombOffsetFlagType kpp,
        TThostFtdcPriceType price,   TThostFtdcVolumeType vol);
	///报单操作请求
	void ReqOrderAction(TThostFtdcSequenceNoType orderSeq);

	// 是否收到成功的响应
	bool IsErrorRspInfo(CThostFtdcRspInfoField *pRspInfo);

  void PrintOrders();
  void PrintTrades();

private:
  //CThostFtdcTraderApi* api;
  //CtpTradeApi *api;

};

#endif
